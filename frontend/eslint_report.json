[{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/context/AuthContext.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/context/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/AvatarExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/BreadcrumbNavExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/ChipExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/ContainerHeaderExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/ContainerUserHeaderExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/HeaderExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/InfoCardExample.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'StorageIcon' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Container, Typography, Paper, Stack } from '@mui/material';\nimport { InfoCard, ContainerInfoData } from '../shared/components/ui/InfoCard';\nimport StorageIcon from '@mui/icons-material/Storage';\nimport LocalShippingIcon from '@mui/icons-material/LocalShipping';\nimport FormatListBulletedIcon from '@mui/icons-material/FormatListBulleted';\n\n// Sample container data\nconst sampleContainerData: ContainerInfoData = {\n  name: 'farm-container-04',\n  id: '51',\n  type: 'Physical',\n  tenant: 'tenant-123',\n  purpose: 'Development',\n  location: 'Lviv',\n  status: 'active',\n  created: '30/01/2025, 09:30',\n  lastModified: '30/01/2025, 11:14',\n  creator: 'Mia Adams',\n  seedTypes: 'Someroots, sunflower, Someroots, Someroots',\n  notes: 'Primary production container for Farm A.',\n  typeIcon: <LocalShippingIcon fontSize=\"small\" sx={{ color: '#000000' }} />,\n};\n\n// Additional container for demonstration\nconst secondContainerData: ContainerInfoData = {\n  name: 'farm-container-05',\n  id: '52',\n  type: 'Virtual',\n  tenant: 'tenant-456',\n  purpose: 'Testing',\n  location: 'Kyiv',\n  status: 'inactive',\n  created: '15/02/2025, 14:22',\n  lastModified: '16/02/2025, 09:45',\n  creator: 'John Smith',\n  seedTypes: 'Alfalfa, Wheat, Barley',\n  notes: 'Test environment for new seed varieties.',\n  typeIcon: <FormatListBulletedIcon fontSize=\"small\" sx={{ color: '#000000' }} />,\n};\n\n/**\n * Example component showcasing the InfoCard component with sample data\n */\nconst InfoCardExample: React.FC = () => {\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom sx={{ mb: 4 }}>\n        Container Information Cards\n      </Typography>\n      \n      <Stack spacing={4}>\n        <Box>\n          <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n            Active Container\n          </Typography>\n          <Paper elevation={0} sx={{ bgcolor: 'background.default', p: 2 }}>\n            <InfoCard containerData={sampleContainerData} />\n          </Paper>\n        </Box>\n        \n        <Box>\n          <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n            Inactive Container\n          </Typography>\n          <Paper elevation={0} sx={{ bgcolor: 'background.default', p: 2 }}>\n            <InfoCard containerData={secondContainerData} />\n          </Paper>\n        </Box>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default InfoCardExample;","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/MetricCardsContainerExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/NavigationButtons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/PaginationExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/SystemInfoCardExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/TableExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/TabsExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/TimePeriodSelectorExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/TooltipExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/TotalContainerIndicatorExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/examples/ViewToggleTabsExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/features/example/ExampleFeature.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/features/example/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/pages/ContainerDetailsPage.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fireEvent' is defined but never used.","line":2,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3123,3126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3123,3126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\nimport { screen, waitFor, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { render } from '../test/utils';\nimport ContainerDetailsPage from './ContainerDetailsPage';\nimport containerService from '../services/containerService';\nimport { mockContainerDetail, mockContainerMetrics, mockContainerCrops, mockContainerActivities } from '../services/mockData';\n\n// Mock the container service\nvi.mock('../services/containerService');\nconst mockContainerService = vi.mocked(containerService);\n\n// Mock react-router-dom\nconst mockNavigate = vi.fn();\nvi.mock('react-router-dom', async () => {\n  const actual = await vi.importActual('react-router-dom');\n  return {\n    ...actual,\n    useParams: () => ({ containerId: 'farm-container-04' }),\n    useNavigate: () => mockNavigate,\n  };\n});\n\n// Mock window.history.back\nObject.defineProperty(window, 'history', {\n  value: { back: vi.fn() },\n  writable: true,\n});\n\ndescribe('ContainerDetailsPage', () => {\n  const user = userEvent.setup();\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    \n    // Setup default successful mock responses\n    mockContainerService.getContainerById.mockResolvedValue(mockContainerDetail);\n    mockContainerService.getContainerMetrics.mockResolvedValue(mockContainerMetrics);\n    mockContainerService.getContainerCrops.mockResolvedValue(mockContainerCrops);\n    mockContainerService.getContainerActivities.mockResolvedValue(mockContainerActivities);\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('Page Loading and Data Fetching', () => {\n    it('should display loading state initially', () => {\n      render(<ContainerDetailsPage />);\n      expect(screen.getByText('Loading container details...')).toBeInTheDocument();\n    });\n\n    it('should fetch and display container data', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(mockContainerService.getContainerById).toHaveBeenCalledWith('farm-container-04');\n        expect(mockContainerService.getContainerMetrics).toHaveBeenCalledWith('farm-container-04', 'WEEK');\n        expect(mockContainerService.getContainerCrops).toHaveBeenCalledWith('farm-container-04', 0, 10);\n        expect(mockContainerService.getContainerActivities).toHaveBeenCalledWith('farm-container-04', 5);\n      });\n\n      expect(screen.getByText('farm-container-04')).toBeInTheDocument();\n      expect(screen.getByText('Physical container | tenant-123 | Development')).toBeInTheDocument();\n    });\n\n    it('should display error state when API fails', async () => {\n      const errorMessage = 'Failed to load container data';\n      mockContainerService.getContainerById.mockRejectedValue(new Error(errorMessage));\n\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText(`Error: ${errorMessage}`)).toBeInTheDocument();\n      });\n    });\n\n    it('should display not found message for invalid container ID', async () => {\n      mockContainerService.getContainerById.mockResolvedValue(null as any);\n\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Container not found')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Header and Navigation', () => {\n    it('should display correct breadcrumb and title', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Container Dashboard / farm-container-04')).toBeInTheDocument();\n        expect(screen.getByText('farm-container-04')).toBeInTheDocument();\n      });\n    });\n\n    it('should display correct metadata and status', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Physical container | tenant-123 | Development')).toBeInTheDocument();\n        expect(screen.getByText('ACTIVE')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle back navigation', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByRole('button', { name: /back/i })).toBeInTheDocument();\n      });\n\n      const backButton = screen.getByRole('button', { name: /back/i });\n      await user.click(backButton);\n\n      expect(window.history.back).toHaveBeenCalled();\n    });\n  });\n\n  describe('Tab Navigation', () => {\n    it('should display all navigation tabs', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Overview')).toBeInTheDocument();\n        expect(screen.getByText('Environment & Recipes')).toBeInTheDocument();\n        expect(screen.getByText('Inventory')).toBeInTheDocument();\n        expect(screen.getByText('Devices')).toBeInTheDocument();\n      });\n    });\n\n    it('should switch between tabs', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Container Metrics')).toBeInTheDocument();\n      });\n\n      const inventoryTab = screen.getByText('Inventory');\n      await user.click(inventoryTab);\n\n      expect(screen.getByText('Inventory content coming soon...')).toBeInTheDocument();\n      expect(screen.queryByText('Container Metrics')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Container Metrics Section', () => {\n    it('should display all metric cards', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Air Temperature')).toBeInTheDocument();\n        expect(screen.getByText('20°C')).toBeInTheDocument();\n        expect(screen.getByText('Rel. Humidity')).toBeInTheDocument();\n        expect(screen.getByText('65%')).toBeInTheDocument();\n        expect(screen.getByText('CO₂ Level')).toBeInTheDocument();\n        expect(screen.getByText('860')).toBeInTheDocument();\n        expect(screen.getByText('Yield')).toBeInTheDocument();\n        expect(screen.getByText('51KG')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle time range changes', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Week')).toBeInTheDocument();\n      });\n\n      const monthButton = screen.getByText('Month');\n      await user.click(monthButton);\n\n      await waitFor(() => {\n        expect(mockContainerService.getContainerMetrics).toHaveBeenCalledWith('farm-container-04', 'MONTH');\n      });\n    });\n  });\n\n  describe('Crops Section', () => {\n    it('should display crops table with data', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Crops')).toBeInTheDocument();\n        expect(screen.getByText('Salanova Cousteau')).toBeInTheDocument();\n        expect(screen.getByText('Kiribati')).toBeInTheDocument();\n        expect(screen.getByText('Rex Butterhead')).toBeInTheDocument();\n        expect(screen.getByText('Lollo Rossa')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle crops section expand/collapse', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Salanova Cousteau')).toBeInTheDocument();\n      });\n\n      const expandButton = screen.getByRole('button', { name: /expand/i });\n      await user.click(expandButton);\n\n      expect(screen.queryByText('Salanova Cousteau')).not.toBeInTheDocument();\n    });\n\n    it('should handle pagination', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Showing page 1 of 1')).toBeInTheDocument();\n      });\n\n      // Mock additional pages\n      mockContainerService.getContainerCrops.mockResolvedValue({\n        total: 20,\n        results: mockContainerCrops.results,\n      });\n\n      // Re-render to get updated pagination\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Showing page 1 of 2')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Container Information Section', () => {\n    it('should display container information', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Container Information & Settings')).toBeInTheDocument();\n        expect(screen.getByText('tenant-123')).toBeInTheDocument();\n        expect(screen.getByText('Development')).toBeInTheDocument();\n        expect(screen.getByText('Lviv')).toBeInTheDocument();\n        expect(screen.getByText('Mia Adams')).toBeInTheDocument();\n      });\n    });\n\n    it('should display system settings', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('System Settings')).toBeInTheDocument();\n        expect(screen.getByText('No')).toBeInTheDocument(); // Shadow service disabled\n        expect(screen.getByText('Alpha')).toBeInTheDocument(); // FA Integration\n        expect(screen.getByText('Dev')).toBeInTheDocument(); // AWS Environment\n      });\n    });\n\n    it('should display activity log', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Activity Log')).toBeInTheDocument();\n        expect(screen.getByText('Seeded Salanova Cousteau in Nursery')).toBeInTheDocument();\n        expect(screen.getByText('Data synced')).toBeInTheDocument();\n        expect(screen.getByText('Emily Chen')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle information section expand/collapse', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('tenant-123')).toBeInTheDocument();\n      });\n\n      const infoExpandButton = screen.getAllByRole('button', { name: /expand/i })[1]; // Second expand button\n      await user.click(infoExpandButton);\n\n      expect(screen.queryByText('tenant-123')).not.toBeInTheDocument();\n    });\n\n    it('should show edit button', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByRole('button', { name: /edit/i })).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Responsive Behavior', () => {\n    it('should adapt to mobile viewport', async () => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Container Metrics')).toBeInTheDocument();\n      });\n\n      // Check that metrics are displayed (responsive grid should still work)\n      expect(screen.getByText('Air Temperature')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error Boundaries and Edge Cases', () => {\n    it('should handle missing container ID parameter', async () => {\n      // Mock useParams to return undefined containerId\n      vi.doMock('react-router-dom', async () => {\n        const actual = await vi.importActual('react-router-dom');\n        return {\n          ...actual,\n          useParams: () => ({ containerId: undefined }),\n        };\n      });\n\n      render(<ContainerDetailsPage />);\n\n      // Should not make API calls without container ID\n      expect(mockContainerService.getContainerById).not.toHaveBeenCalled();\n    });\n\n    it('should handle partial API failures gracefully', async () => {\n      mockContainerService.getContainerMetrics.mockRejectedValue(new Error('Metrics unavailable'));\n\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('farm-container-04')).toBeInTheDocument();\n      });\n\n      // Should still display other sections even if metrics fail\n      expect(screen.getByText('Crops')).toBeInTheDocument();\n    });\n\n    it('should handle empty data responses', async () => {\n      mockContainerService.getContainerCrops.mockResolvedValue({\n        total: 0,\n        results: [],\n      });\n      mockContainerService.getContainerActivities.mockResolvedValue({\n        activities: [],\n      });\n\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Crops')).toBeInTheDocument();\n        expect(screen.getByText('Activity Log')).toBeInTheDocument();\n      });\n\n      // Should handle empty data gracefully\n      expect(screen.getByText('Showing page 1 of 0')).toBeInTheDocument();\n    });\n  });\n\n  describe('Performance and Optimization', () => {\n    it('should make parallel API calls on initial load', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(mockContainerService.getContainerById).toHaveBeenCalledTimes(1);\n        expect(mockContainerService.getContainerMetrics).toHaveBeenCalledTimes(1);\n        expect(mockContainerService.getContainerCrops).toHaveBeenCalledTimes(1);\n        expect(mockContainerService.getContainerActivities).toHaveBeenCalledTimes(1);\n      });\n\n      // Verify all calls were made in parallel (no waiting between calls)\n      expect(mockContainerService.getContainerById).toHaveBeenCalledWith('farm-container-04');\n    });\n\n    it('should reload data when dependencies change', async () => {\n      render(<ContainerDetailsPage />);\n\n      await waitFor(() => {\n        expect(mockContainerService.getContainerMetrics).toHaveBeenCalledWith('farm-container-04', 'WEEK');\n      });\n\n      // Change time range\n      const quarterButton = screen.getByText('Quarter');\n      await user.click(quarterButton);\n\n      await waitFor(() => {\n        expect(mockContainerService.getContainerMetrics).toHaveBeenCalledWith('farm-container-04', 'QUARTER');\n      });\n\n      // Should have been called twice (initial + after change)\n      expect(mockContainerService.getContainerMetrics).toHaveBeenCalledTimes(2);\n    });\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/pages/ContainerDetailsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5413,5416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5413,5416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Box, Typography, Grid, Card, CardContent, Collapse, Button, IconButton } from '@mui/material';\nimport { ExpandMore, ExpandLess, Edit, Person as PersonIcon, Computer as ComputerIcon } from '@mui/icons-material';\nimport LocalShippingIcon from '@mui/icons-material/LocalShipping';\nimport Header from '../shared/components/ui/Header';\nimport { MetricCardsContainer } from '../shared/components/ui/MetricCardsContainer';\nimport { Table } from '../shared/components/ui/Table';\nimport { Pagination } from '../shared/components/ui/Pagination';\nimport { Chip } from '../shared/components/ui/Chip';\nimport { TimePeriodSelector, TimePeriod } from '../shared/components/ui/TimePeriodSelector';\nimport { ContainerUserHeader } from '../shared/components/ui/ContainerUserHeader';\nimport containerService from '../services/containerService';\nimport { ContainerDetail, ContainerCrop, ContainerActivity } from '../shared/types/containers';\nimport { ContainerMetrics, TimeRange, MetricCardData } from '../shared/types/metrics';\n\nconst ContainerDetailsPage: React.FC = () => {\n  const { containerId } = useParams<{ containerId: string }>();\n  const [activeTab, setActiveTab] = useState(0);\n  const [selectedTimeRange, setSelectedTimeRange] = useState<TimePeriod>('week');\n  const [cropsExpanded, setCropsExpanded] = useState(true);\n  const [infoExpanded, setInfoExpanded] = useState(true);\n  const [currentCropsPage, setCurrentCropsPage] = useState(1);\n  \n  // Data states\n  const [containerData, setContainerData] = useState<ContainerDetail | null>(null);\n  const [metricsData, setMetricsData] = useState<ContainerMetrics | null>(null);\n  const [cropsData, setCropsData] = useState<ContainerCrop[]>([]);\n  const [totalCrops, setTotalCrops] = useState(0);\n  const [activitiesData, setActivitiesData] = useState<ContainerActivity[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load container data\n  useEffect(() => {\n    const loadContainerData = async () => {\n      if (!containerId) return;\n      \n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Convert TimePeriod to TimeRange for API\n        const timeRangeMap: Record<TimePeriod, TimeRange> = {\n          'week': 'WEEK',\n          'month': 'MONTH',\n          'quarter': 'QUARTER',\n          'year': 'YEAR'\n        };\n        \n        const [container, metrics, crops, activities] = await Promise.all([\n          containerService.getContainerById(containerId),\n          containerService.getContainerMetrics(containerId, timeRangeMap[selectedTimeRange]),\n          containerService.getContainerCrops(containerId, currentCropsPage - 1, 10),\n          containerService.getContainerActivities(containerId, 5)\n        ]);\n        \n        setContainerData(container);\n        setMetricsData(metrics);\n        setCropsData(crops.results);\n        setTotalCrops(crops.total);\n        setActivitiesData(activities.activities);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load container data');\n        console.error('Error loading container data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadContainerData();\n  }, [containerId, selectedTimeRange, currentCropsPage]);\n\n  // Transform metrics data for MetricCardsContainer\n  const getMetricCards = (): MetricCardData[] => {\n    if (!metricsData) return [];\n    \n    return [\n      {\n        title: 'Air Temperature',\n        value: `${metricsData.temperature.current}${metricsData.temperature.unit}`,\n        targetValue: metricsData.temperature.target ? `${metricsData.temperature.target}${metricsData.temperature.unit}` : undefined,\n      },\n      {\n        title: 'Rel. Humidity',\n        value: `${metricsData.humidity.current}${metricsData.humidity.unit}`,\n        targetValue: metricsData.humidity.target ? `${metricsData.humidity.target}${metricsData.humidity.unit}` : undefined,\n      },\n      {\n        title: 'CO₂ Level',\n        value: `${metricsData.co2.current}`,\n        targetValue: `${metricsData.co2.target}-900ppm`,\n      },\n      {\n        title: 'Yield',\n        value: `${metricsData.yield.current}${metricsData.yield.unit}`,\n        trend: metricsData.yield.trend,\n      },\n      {\n        title: 'Nursery Station Utilization',\n        value: `${metricsData.nursery_utilization.current}${metricsData.nursery_utilization.unit}`,\n        trend: metricsData.nursery_utilization.trend,\n      },\n      {\n        title: 'Cultivation Area Utilization',\n        value: `${metricsData.cultivation_utilization.current}${metricsData.cultivation_utilization.unit}`,\n        trend: metricsData.cultivation_utilization.trend,\n      },\n    ];\n  };\n\n  // Table columns for crops\n  const cropsColumns = [\n    { id: 'seed_type', label: 'SEED TYPE', field: 'seed_type' },\n    { id: 'cultivation_area', label: 'CULTIVATION AREA', field: 'cultivation_area' },\n    { id: 'nursery_table', label: 'NURSERY TABLE', field: 'nursery_table' },\n    { id: 'last_sd', label: 'LAST SD', field: 'last_sd' },\n    { id: 'last_td', label: 'LAST TD', field: 'last_td' },\n    { id: 'last_hd', label: 'LAST HD', field: 'last_hd' },\n    { id: 'avg_age', label: 'AVG AGE', field: 'avg_age' },\n    {\n      id: 'overdue',\n      label: 'OVERDUE',\n      renderCell: (row: any) => (\n        <Chip \n          value={row.overdue} \n          status={row.overdue > 0 ? 'in-progress' : 'active'} \n        />\n      ),\n    },\n  ];\n\n  // Format date display in dd/mm/yyyy, HH:mm format to match reference\n  const formatDate = (dateString: string | null) => {\n    if (!dateString) return '--';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-GB', { \n      day: '2-digit', \n      month: '2-digit', \n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    }).replace(',', ',');\n  };\n\n  // Transform crops data for table\n  const cropsTableData = cropsData.map(crop => ({\n    ...crop,\n    last_sd: formatDate(crop.last_sd),\n    last_td: formatDate(crop.last_td),\n    last_hd: formatDate(crop.last_hd),\n  }));\n\n  const tabs = [\n    { label: 'Overview', value: 0 },\n    { label: 'Environment & Recipes', value: 1 },\n    { label: 'Inventory', value: 2 },\n    { label: 'Devices', value: 3 },\n  ];\n\n  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  const handleTimeRangeChange = (newTimeRange: TimePeriod) => {\n    setSelectedTimeRange(newTimeRange);\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography>Loading container details...</Typography>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\">Error: {error}</Typography>\n      </Box>\n    );\n  }\n\n  if (!containerData) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography>Container not found</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ minHeight: '100vh', backgroundColor: '#fafafa' }}>\n      <Header\n        breadcrumb={`Container Dashboard / ${containerData.name}`}\n        title={containerData.name}\n        metadata={`${containerData.type === 'PHYSICAL' ? 'Physical container' : 'Virtual container'} | ${containerData.tenant} | ${containerData.purpose}`}\n        status={containerData.status === 'ACTIVE' ? 'active' : 'inactive'}\n        tabs={tabs}\n        selectedTab={activeTab}\n        onTabChange={handleTabChange}\n        onBackClick={() => window.history.back()}\n      />\n\n      {activeTab === 0 && (\n        <Box sx={{ p: 3 }}>\n          {/* Container Metrics Section */}\n          <Box sx={{ mb: 4 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Container Metrics\n              </Typography>\n              <TimePeriodSelector\n                value={selectedTimeRange}\n                onChange={handleTimeRangeChange}\n                options={[\n                  { label: 'Week', value: 'week' },\n                  { label: 'Month', value: 'month' },\n                  { label: 'Quarter', value: 'quarter' },\n                  { label: 'Year', value: 'year' },\n                ]}\n              />\n            </Box>\n            <MetricCardsContainer \n              metrics={getMetricCards()}\n            />\n          </Box>\n\n          {/* Crops Section */}\n          <Card sx={{ mb: 4 }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                  Crops\n                </Typography>\n                <IconButton onClick={() => setCropsExpanded(!cropsExpanded)}>\n                  {cropsExpanded ? <ExpandLess /> : <ExpandMore />}\n                </IconButton>\n              </Box>\n              <Collapse in={cropsExpanded}>\n                <Table\n                  columns={cropsColumns}\n                  rows={cropsTableData}\n                  fullWidth\n                  zebraStriping\n                />\n                <Box sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}>\n                  <Pagination\n                    page={currentCropsPage}\n                    totalPages={Math.ceil(totalCrops / 10)}\n                    onPageChange={setCurrentCropsPage}\n                    showingText={`Showing page ${currentCropsPage} of ${Math.ceil(totalCrops / 10)}`}\n                  />\n                </Box>\n              </Collapse>\n            </CardContent>\n          </Card>\n\n          {/* Container Information & Settings */}\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                  Container Information & Settings\n                </Typography>\n                <Box sx={{ display: 'flex', gap: 1 }}>\n                  <Button startIcon={<Edit />} size=\"small\">\n                    Edit\n                  </Button>\n                  <IconButton onClick={() => setInfoExpanded(!infoExpanded)}>\n                    {infoExpanded ? <ExpandLess /> : <ExpandMore />}\n                  </IconButton>\n                </Box>\n              </Box>\n              <Collapse in={infoExpanded}>\n                <Grid container spacing={3}>\n                  {/* Container Information */}\n                  <Grid item xs={12} md={4}>\n                    <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 2 }}>\n                      Container Information\n                    </Typography>\n                    <Box sx={{ '& > *': { mb: 1 } }}>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Name</Typography>\n                        <Typography variant=\"body2\">{containerData.name}</Typography>\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Type</Typography>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          {containerData.type === 'PHYSICAL' && (\n                            <LocalShippingIcon fontSize=\"small\" sx={{ color: '#000000' }} />\n                          )}\n                          <Typography variant=\"body2\">{containerData.type === 'PHYSICAL' ? 'Physical' : 'Virtual'}</Typography>\n                        </Box>\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Tenant</Typography>\n                        <Typography variant=\"body2\">{containerData.tenant}</Typography>\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Purpose</Typography>\n                        <Typography variant=\"body2\">{containerData.purpose}</Typography>\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Location</Typography>\n                        <Typography variant=\"body2\">{containerData.location.city}</Typography>\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Status</Typography>\n                        <Chip \n                          value={containerData.status === 'ACTIVE' ? 'Active' : \n                                containerData.status === 'INACTIVE' ? 'Inactive' : \n                                containerData.status}\n                          status={containerData.status.toLowerCase() as 'active' | 'inactive'} \n                          size=\"small\" \n                        />\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Created</Typography>\n                        <Typography variant=\"body2\">{formatDate(containerData.created)}</Typography>\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Last Modified</Typography>\n                        <Typography variant=\"body2\">{formatDate(containerData.modified)}</Typography>\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Creator</Typography>\n                        <Typography variant=\"body2\">{containerData.creator}</Typography>\n                      </Box>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Seed Type:</Typography>\n                        <Typography variant=\"body2\" sx={{ textAlign: 'right', maxWidth: '65%', wordBreak: 'break-word' }}>\n                          {containerData.seed_types.join(', ')}\n                        </Typography>\n                      </Box>\n                    </Box>\n                    <Box sx={{ mt: 2 }}>\n                      <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 1 }}>\n                        Notes\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {containerData.notes}\n                      </Typography>\n                    </Box>\n                  </Grid>\n\n                  {/* System Settings */}\n                  <Grid item xs={12} md={4}>\n                    <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 2 }}>\n                      System Settings\n                    </Typography>\n                    <Box sx={{ '& > *': { mb: 2 } }}>\n                      <Box>\n                        <Typography variant=\"body2\" sx={{ fontWeight: 600, mb: 1 }}>\n                          Container Options\n                        </Typography>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">Enable Shadow Service</Typography>\n                          <Typography variant=\"body2\">{containerData.shadow_service_enabled ? 'Yes' : 'No'}</Typography>\n                        </Box>\n                      </Box>\n                      <Box>\n                        <Typography variant=\"body2\" sx={{ fontWeight: 600, mb: 1 }}>\n                          System Integration\n                        </Typography>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">Connect to external systems</Typography>\n                          <Typography variant=\"body2\">{containerData.ecosystem_connected ? 'Yes' : 'No'}</Typography>\n                        </Box>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">FA Integration</Typography>\n                          <Typography variant=\"body2\" color=\"primary\">{containerData.system_integrations.fa_integration.name}</Typography>\n                        </Box>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">AWS Environment</Typography>\n                          <Typography variant=\"body2\" color=\"primary\">{containerData.system_integrations.aws_environment.name}</Typography>\n                        </Box>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                          <Typography variant=\"body2\" color=\"text.secondary\">MBAI Environment</Typography>\n                          <Typography variant=\"body2\" color=\"primary\">{containerData.system_integrations.mbai_environment.name}</Typography>\n                        </Box>\n                      </Box>\n                    </Box>\n                  </Grid>\n\n                  {/* Activity Log */}\n                  <Grid item xs={12} md={4}>\n                    <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 2 }}>\n                      Activity Log\n                    </Typography>\n                    <Box sx={{ border: '1px solid rgba(0, 0, 0, 0.12)', borderRadius: 1, overflow: 'hidden' }}>\n                      {activitiesData.map((activity) => (\n                        <ContainerUserHeader\n                          key={activity.id}\n                          title={activity.description}\n                          timestamp={`${new Date(activity.timestamp).toLocaleDateString('en-US', { \n                            year: 'numeric', \n                            month: 'long', \n                            day: 'numeric' \n                          })} - ${new Date(activity.timestamp).toLocaleTimeString('en-US', { \n                            hour: 'numeric', \n                            minute: '2-digit',\n                            hour12: true \n                          })}`}\n                          userName={activity.user.name}\n                          avatarColor={activity.type === 'MAINTENANCE' ? '#4caf50' : activity.type === 'SYNCED' ? '#455a64' : '#4caf50'}\n                          avatarIcon={activity.type === 'MAINTENANCE' ? <PersonIcon /> : activity.type === 'SYNCED' ? <ComputerIcon /> : <PersonIcon />}\n                        />\n                      ))}\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Collapse>\n            </CardContent>\n          </Card>\n        </Box>\n      )}\n\n      {/* Other tabs content can be added here */}\n      {activeTab !== 0 && (\n        <Box sx={{ p: 3, textAlign: 'center' }}>\n          <Typography variant=\"h6\" color=\"text.secondary\">\n            {tabs[activeTab]?.label} content coming soon...\n          </Typography>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ContainerDetailsPage;","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/router/AppRouter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/router/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/services/backendHealth.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":84,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeAll } from 'vitest';\nimport config from './config';\n\nconst BACKEND_URL = 'http://localhost:8000';\nconst API_BASE_URL = `${BACKEND_URL}/api/v1`;\nconst TEST_TIMEOUT = 10000; // 10 seconds\n\ndescribe('Backend Health Checks', () => {\n  let backendAvailable = false;\n\n  beforeAll(async () => {\n    try {\n      const response = await fetch(`${BACKEND_URL}/docs`);\n      backendAvailable = response.ok;\n    } catch {\n      backendAvailable = false;\n    }\n  });\n\n  describe('Backend Server Connectivity', () => {\n    it('should connect to backend server root', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend server not available at http://localhost:8000');\n        console.warn('To run these tests, start the backend server:');\n        console.warn('  cd backend');\n        console.warn('  python -m uvicorn app.main:app --reload');\n        return;\n      }\n\n      const response = await fetch(BACKEND_URL);\n      expect(response.status).toBeLessThan(500);\n    }, TEST_TIMEOUT);\n\n    it('should serve API documentation', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const response = await fetch(`${BACKEND_URL}/docs`);\n      expect(response.ok).toBe(true);\n      expect(response.headers.get('content-type')).toContain('text/html');\n    }, TEST_TIMEOUT);\n\n    it('should serve OpenAPI spec', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const response = await fetch(`${BACKEND_URL}/openapi.json`);\n      expect(response.ok).toBe(true);\n      expect(response.headers.get('content-type')).toContain('application/json');\n      \n      const openApiSpec = await response.json();\n      expect(openApiSpec).toHaveProperty('openapi');\n      expect(openApiSpec).toHaveProperty('info');\n      expect(openApiSpec).toHaveProperty('paths');\n    }, TEST_TIMEOUT);\n  });\n\n  describe('API Endpoints Availability', () => {\n    it('should respond to containers endpoint', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/containers`);\n      expect([200, 404]).toContain(response.status); // Either has data or empty\n    }, TEST_TIMEOUT);\n\n    it('should respond to health check endpoint if available', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      try {\n        const response = await fetch(`${API_BASE_URL}/health`);\n        if (response.status !== 404) {\n          expect(response.ok).toBe(true);\n        }\n      } catch (error) {\n        // Health endpoint might not exist, that's okay\n        console.warn('Health endpoint not available');\n      }\n    }, TEST_TIMEOUT);\n\n    it('should have CORS enabled for frontend origin', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/containers`, {\n        method: 'OPTIONS',\n        headers: {\n          'Origin': 'http://localhost:5173',\n          'Access-Control-Request-Method': 'GET',\n        },\n      });\n\n      // Should not be a CORS error\n      expect(response.status).not.toBe(405);\n    }, TEST_TIMEOUT);\n  });\n\n  describe('API Response Format Validation', () => {\n    it('should return JSON responses with correct headers', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/containers`);\n      expect(response.headers.get('content-type')).toContain('application/json');\n    }, TEST_TIMEOUT);\n\n    it('should handle invalid endpoints gracefully', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/invalid-endpoint`);\n      expect(response.status).toBe(404);\n    }, TEST_TIMEOUT);\n\n    it('should return proper error format for 404s', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const response = await fetch(`${API_BASE_URL}/containers/non-existent-id`);\n      if (response.status === 404) {\n        const errorData = await response.json();\n        expect(errorData).toHaveProperty('detail');\n      }\n    }, TEST_TIMEOUT);\n  });\n\n  describe('Performance Metrics', () => {\n    it('should respond within acceptable time limits', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const startTime = Date.now();\n      const response = await fetch(`${API_BASE_URL}/containers`);\n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n\n      expect(response.status).toBeLessThan(500);\n      expect(responseTime).toBeLessThan(5000); // Should respond within 5 seconds\n    }, TEST_TIMEOUT);\n\n    it('should handle concurrent requests', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      const promises = Array.from({ length: 5 }, () =>\n        fetch(`${API_BASE_URL}/containers`)\n      );\n\n      const responses = await Promise.all(promises);\n      \n      responses.forEach(response => {\n        expect(response.status).toBeLessThan(500);\n      });\n    }, TEST_TIMEOUT);\n  });\n\n  describe('Environment Configuration', () => {\n    it('should use correct API base URL in tests', () => {\n      expect(API_BASE_URL).toBe('http://localhost:8000/api/v1');\n    });\n\n    it('should validate frontend config points to backend', () => {\n      // In development, frontend should point to the backend\n      if (config.api.isDevelopment) {\n        expect(config.api.baseUrl).toContain('localhost:8000');\n      }\n    });\n\n    it('should have mock fallback disabled for integration tests', () => {\n      // For integration tests, we want to test real backend\n      const integrationMode = process.env.NODE_ENV === 'test';\n      if (integrationMode && backendAvailable) {\n        expect(config.api.enableMockFallback).toBe(false);\n      }\n    });\n  });\n\n  describe('Data Consistency Checks', () => {\n    it('should return consistent data structure across endpoints', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      try {\n        const containersResponse = await fetch(`${API_BASE_URL}/containers`);\n        if (!containersResponse.ok) return;\n\n        const containersData = await containersResponse.json();\n        if (!containersData.data || containersData.data.length === 0) return;\n\n        const firstContainer = containersData.data[0];\n        const containerId = firstContainer.id;\n\n        // Test individual container endpoint\n        const containerResponse = await fetch(`${API_BASE_URL}/containers/${containerId}`);\n        if (containerResponse.ok) {\n          const containerData = await containerResponse.json();\n          \n          // Should have same basic structure\n          expect(containerData.id).toBe(firstContainer.id);\n          expect(containerData.name).toBe(firstContainer.name);\n          expect(containerData.type).toBe(firstContainer.type);\n        }\n\n        // Test metrics endpoint\n        const metricsResponse = await fetch(`${API_BASE_URL}/containers/${containerId}/metrics`);\n        if (metricsResponse.ok) {\n          const metricsData = await metricsResponse.json();\n          expect(metricsData).toHaveProperty('temperature');\n          expect(metricsData).toHaveProperty('humidity');\n        }\n\n      } catch (error) {\n        console.warn('Data consistency check failed:', error);\n      }\n    }, TEST_TIMEOUT);\n\n    it('should maintain data integrity across CRUD operations', async () => {\n      if (!backendAvailable) {\n        console.warn('Backend not available, skipping test');\n        return;\n      }\n\n      try {\n        // Create a test container\n        const newContainerData = {\n          name: `integration-test-${Date.now()}`,\n          type: 'PHYSICAL',\n          tenant: 'test-tenant',\n          purpose: 'Development',\n          location: { city: 'Test', country: 'Test', address: 'Test' },\n          status: 'ACTIVE',\n          creator: 'Integration Test',\n          seed_types: ['test'],\n          notes: 'Integration test container',\n          shadow_service_enabled: false,\n          ecosystem_connected: false,\n          system_integrations: {\n            fa_integration: { name: 'Test', enabled: false },\n            aws_environment: { name: 'Test', enabled: false },\n            mbai_environment: { name: 'Test', enabled: false }\n          }\n        };\n\n        const createResponse = await fetch(`${API_BASE_URL}/containers`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(newContainerData),\n        });\n\n        if (createResponse.ok) {\n          const createdContainer = await createResponse.json();\n          const containerId = createdContainer.id;\n\n          // Verify created data\n          expect(createdContainer.name).toBe(newContainerData.name);\n          expect(createdContainer.type).toBe(newContainerData.type);\n\n          // Update the container\n          const updateData = { notes: 'Updated in integration test' };\n          const updateResponse = await fetch(`${API_BASE_URL}/containers/${containerId}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(updateData),\n          });\n\n          if (updateResponse.ok) {\n            const updatedContainer = await updateResponse.json();\n            expect(updatedContainer.notes).toBe('Updated in integration test');\n          }\n\n          // Clean up - delete the test container\n          await fetch(`${API_BASE_URL}/containers/${containerId}`, {\n            method: 'DELETE',\n          });\n        }\n      } catch (error) {\n        console.warn('CRUD integrity check failed:', error);\n      }\n    }, TEST_TIMEOUT);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/services/config.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/services/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/services/containerService.integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isBackendAvailable' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'skipIfBackendUnavailable' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'generateTestContainer' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validateContainerStructure' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validateMetricsStructure' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validateCropStructure' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validateActivityStructure' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":40,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9846,9849],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9846,9849],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":416,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16126,16129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16126,16129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":465,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":465,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18102,18105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18102,18105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeAll, afterAll, afterEach, vi } from 'vitest';\nimport containerService from './containerService';\nimport config from './config';\nimport { \n  TEST_CONFIG, \n  isBackendAvailable, \n  skipIfBackendUnavailable,\n  generateTestContainer,\n  validateContainerStructure,\n  validateMetricsStructure,\n  validateCropStructure,\n  validateActivityStructure\n} from '../test/testEnv';\n\n// These are integration tests that connect to the real backend\n// The backend should be running at http://localhost:8000 for these tests to pass\n\n// Override config to use real backend\nconst originalBaseUrl = config.api.baseUrl;\nconst originalMockFallback = config.api.enableMockFallback;\n\ndescribe('Container Service - Real Backend Integration', () => {\n  beforeAll(() => {\n    // Configure to use real backend\n    vi.spyOn(config.api, 'baseUrl', 'get').mockReturnValue(TEST_CONFIG.API_BASE_URL);\n    vi.spyOn(config.api, 'enableMockFallback', 'get').mockReturnValue(false);\n  });\n\n  afterAll(() => {\n    // Restore original config\n    vi.spyOn(config.api, 'baseUrl', 'get').mockReturnValue(originalBaseUrl);\n    vi.spyOn(config.api, 'enableMockFallback', 'get').mockReturnValue(originalMockFallback);\n  });\n\n  describe('Backend Connectivity', () => {\n    it('should connect to the backend server', async () => {\n      try {\n        const response = await fetch(`${TEST_CONFIG.API_BASE_URL}/containers`);\n        expect(response.status).toBeLessThan(500); // Should not be a server error\n      } catch (error) {\n        console.warn('Backend not available, skipping integration tests');\n        console.warn('To run integration tests, start the backend server with: cd backend && python -m uvicorn app.main:app --reload');\n        return;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n  });\n\n  describe('Container CRUD Operations', () => {\n    let createdContainerId: string | null = null;\n\n    afterEach(async () => {\n      // Clean up created containers\n      if (createdContainerId) {\n        try {\n          await containerService.deleteContainer(createdContainerId);\n        } catch (error) {\n          console.warn('Failed to clean up test container:', error);\n        }\n        createdContainerId = null;\n      }\n    });\n\n    it('should fetch containers list', async () => {\n      try {\n        const result = await containerService.getContainers(0, 10);\n        \n        expect(result).toHaveProperty('data');\n        expect(result).toHaveProperty('count');\n        expect(Array.isArray(result.data)).toBe(true);\n        expect(typeof result.count).toBe('number');\n        \n        // Validate container structure if data exists\n        if (result.data.length > 0) {\n          const container = result.data[0];\n          expect(container).toHaveProperty('id');\n          expect(container).toHaveProperty('name');\n          expect(container).toHaveProperty('type');\n          expect(container).toHaveProperty('status');\n          expect(['PHYSICAL', 'VIRTUAL']).toContain(container.type);\n          expect(['CREATED', 'ACTIVE', 'MAINTENANCE', 'INACTIVE']).toContain(container.status);\n        }\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n\n    it('should create a new container', async () => {\n      const newContainerData = {\n        name: `test-container-${Date.now()}`,\n        type: 'PHYSICAL' as const,\n        tenant: 'test-tenant',\n        purpose: 'Development' as const,\n        location: {\n          city: 'Test City',\n          country: 'Test Country',\n          address: 'Test Address'\n        },\n        status: 'ACTIVE' as const,\n        creator: 'Test User',\n        seed_types: ['test-seed'],\n        notes: 'Integration test container',\n        shadow_service_enabled: false,\n        ecosystem_connected: false,\n        system_integrations: {\n          fa_integration: { name: 'Test', enabled: false },\n          aws_environment: { name: 'Test', enabled: false },\n          mbai_environment: { name: 'Test', enabled: false }\n        }\n      };\n\n      try {\n        const result = await containerService.createContainer(newContainerData);\n        createdContainerId = result.id;\n\n        expect(result).toHaveProperty('id');\n        expect(result.name).toBe(newContainerData.name);\n        expect(result.type).toBe(newContainerData.type);\n        expect(result.tenant).toBe(newContainerData.tenant);\n        expect(result.purpose).toBe(newContainerData.purpose);\n        expect(result.status).toBe(newContainerData.status);\n        expect(result.location).toEqual(newContainerData.location);\n        expect(result.system_integrations).toEqual(newContainerData.system_integrations);\n        expect(result).toHaveProperty('created');\n        expect(result).toHaveProperty('modified');\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n\n    it('should fetch container by ID', async () => {\n      try {\n        // First, get the default container or create one\n        const containers = await containerService.getContainers(0, 1);\n        let containerId: string;\n\n        if (containers.data.length > 0) {\n          containerId = containers.data[0].id;\n        } else {\n          // Create a test container if none exist\n          const newContainer = await containerService.createContainer({\n            name: 'test-fetch-container',\n            type: 'PHYSICAL',\n            tenant: 'test-tenant',\n            purpose: 'Development',\n            location: { city: 'Test', country: 'Test', address: 'Test' },\n            status: 'ACTIVE',\n            creator: 'Test',\n            seed_types: ['test'],\n            notes: 'Test',\n            shadow_service_enabled: false,\n            ecosystem_connected: false,\n            system_integrations: {\n              fa_integration: { name: 'Test', enabled: false },\n              aws_environment: { name: 'Test', enabled: false },\n              mbai_environment: { name: 'Test', enabled: false }\n            }\n          });\n          containerId = newContainer.id;\n          createdContainerId = containerId;\n        }\n\n        const result = await containerService.getContainerById(containerId);\n\n        expect(result).toHaveProperty('id', containerId);\n        expect(result).toHaveProperty('name');\n        expect(result).toHaveProperty('type');\n        expect(result).toHaveProperty('status');\n        expect(result).toHaveProperty('location');\n        expect(result.location).toHaveProperty('city');\n        expect(result.location).toHaveProperty('country');\n        expect(result.location).toHaveProperty('address');\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n\n    it('should update a container', async () => {\n      try {\n        // Create a test container first\n        const newContainer = await containerService.createContainer({\n          name: 'test-update-container',\n          type: 'PHYSICAL',\n          tenant: 'test-tenant',\n          purpose: 'Development',\n          location: { city: 'Original City', country: 'Test', address: 'Test' },\n          status: 'ACTIVE',\n          creator: 'Test',\n          seed_types: ['test'],\n          notes: 'Original notes',\n          shadow_service_enabled: false,\n          ecosystem_connected: false,\n          system_integrations: {\n            fa_integration: { name: 'Test', enabled: false },\n            aws_environment: { name: 'Test', enabled: false },\n            mbai_environment: { name: 'Test', enabled: false }\n          }\n        });\n        createdContainerId = newContainer.id;\n\n        const updateData = {\n          notes: 'Updated notes',\n          location: { city: 'Updated City', country: 'Test', address: 'Test' }\n        };\n\n        const result = await containerService.updateContainer(newContainer.id, updateData);\n\n        expect(result.id).toBe(newContainer.id);\n        expect(result.notes).toBe('Updated notes');\n        expect(result.location.city).toBe('Updated City');\n        expect(new Date(result.modified).getTime()).toBeGreaterThan(new Date(newContainer.modified).getTime());\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n  });\n\n  describe('Container Metrics', () => {\n    it('should fetch container metrics', async () => {\n      try {\n        // Get any available container\n        const containers = await containerService.getContainers(0, 1);\n        if (containers.data.length === 0) {\n          console.warn('No containers available for metrics test');\n          return;\n        }\n\n        const containerId = containers.data[0].id;\n        const result = await containerService.getContainerMetrics(containerId, 'WEEK');\n\n        // Validate metrics structure\n        expect(result).toHaveProperty('temperature');\n        expect(result).toHaveProperty('humidity');\n        expect(result).toHaveProperty('co2');\n        expect(result).toHaveProperty('yield');\n        expect(result).toHaveProperty('nursery_utilization');\n        expect(result).toHaveProperty('cultivation_utilization');\n\n        // Validate metric value structure\n        const validateMetricValue = (metric: any) => {\n          expect(metric).toHaveProperty('current');\n          expect(metric).toHaveProperty('unit');\n          expect(typeof metric.current).toBe('number');\n          expect(typeof metric.unit).toBe('string');\n        };\n\n        validateMetricValue(result.temperature);\n        validateMetricValue(result.humidity);\n        validateMetricValue(result.co2);\n        validateMetricValue(result.yield);\n        validateMetricValue(result.nursery_utilization);\n        validateMetricValue(result.cultivation_utilization);\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n\n    it('should fetch metrics with different time ranges', async () => {\n      try {\n        const containers = await containerService.getContainers(0, 1);\n        if (containers.data.length === 0) {\n          console.warn('No containers available for metrics test');\n          return;\n        }\n\n        const containerId = containers.data[0].id;\n        const timeRanges = ['WEEK', 'MONTH', 'QUARTER', 'YEAR'] as const;\n\n        for (const timeRange of timeRanges) {\n          const result = await containerService.getContainerMetrics(containerId, timeRange);\n          expect(result).toHaveProperty('temperature');\n          expect(result.temperature).toHaveProperty('current');\n        }\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n  });\n\n  describe('Container Crops', () => {\n    it('should fetch container crops with pagination', async () => {\n      try {\n        const containers = await containerService.getContainers(0, 1);\n        if (containers.data.length === 0) {\n          console.warn('No containers available for crops test');\n          return;\n        }\n\n        const containerId = containers.data[0].id;\n        const result = await containerService.getContainerCrops(containerId, 0, 5);\n\n        expect(result).toHaveProperty('total');\n        expect(result).toHaveProperty('results');\n        expect(typeof result.total).toBe('number');\n        expect(Array.isArray(result.results)).toBe(true);\n\n        // Validate crop structure if data exists\n        if (result.results.length > 0) {\n          const crop = result.results[0];\n          expect(crop).toHaveProperty('id');\n          expect(crop).toHaveProperty('seed_type');\n          expect(crop).toHaveProperty('cultivation_area');\n          expect(crop).toHaveProperty('nursery_table');\n          expect(crop).toHaveProperty('avg_age');\n          expect(crop).toHaveProperty('overdue');\n          expect(typeof crop.cultivation_area).toBe('number');\n          expect(typeof crop.nursery_table).toBe('number');\n          expect(typeof crop.avg_age).toBe('number');\n          expect(typeof crop.overdue).toBe('number');\n        }\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n  });\n\n  describe('Container Activities', () => {\n    it('should fetch container activities', async () => {\n      try {\n        const containers = await containerService.getContainers(0, 1);\n        if (containers.data.length === 0) {\n          console.warn('No containers available for activities test');\n          return;\n        }\n\n        const containerId = containers.data[0].id;\n        const result = await containerService.getContainerActivities(containerId, 5);\n\n        expect(result).toHaveProperty('activities');\n        expect(Array.isArray(result.activities)).toBe(true);\n\n        // Validate activity structure if data exists\n        if (result.activities.length > 0) {\n          const activity = result.activities[0];\n          expect(activity).toHaveProperty('id');\n          expect(activity).toHaveProperty('type');\n          expect(activity).toHaveProperty('timestamp');\n          expect(activity).toHaveProperty('description');\n          expect(activity).toHaveProperty('user');\n          expect(activity).toHaveProperty('details');\n          expect(['SEEDED', 'SYNCED', 'ENVIRONMENT_CHANGED', 'CREATED', 'MAINTENANCE']).toContain(activity.type);\n          expect(activity.user).toHaveProperty('name');\n          expect(activity.user).toHaveProperty('role');\n        }\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n  });\n\n  describe('Error Handling', () => {\n    it('should handle 404 errors correctly', async () => {\n      try {\n        await expect(containerService.getContainerById('non-existent-id')).rejects.toThrow('404');\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n\n    it('should validate enum values', async () => {\n      try {\n        const invalidContainerData = {\n          name: 'invalid-container',\n          type: 'INVALID_TYPE', // Invalid enum value\n          tenant: 'test-tenant',\n          purpose: 'Development',\n          location: { city: 'Test', country: 'Test', address: 'Test' },\n          status: 'ACTIVE',\n          creator: 'Test',\n          seed_types: ['test'],\n          notes: 'Test',\n          shadow_service_enabled: false,\n          ecosystem_connected: false,\n          system_integrations: {\n            fa_integration: { name: 'Test', enabled: false },\n            aws_environment: { name: 'Test', enabled: false },\n            mbai_environment: { name: 'Test', enabled: false }\n          }\n        };\n\n        await expect(containerService.createContainer(invalidContainerData as any)).rejects.toThrow();\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n  });\n\n  describe('Data Model Validation', () => {\n    it('should validate ContainerLocation structure', async () => {\n      try {\n        const containers = await containerService.getContainers(0, 1);\n        if (containers.data.length === 0) {\n          console.warn('No containers available for validation test');\n          return;\n        }\n\n        const container = containers.data[0];\n        expect(container.location).toHaveProperty('city');\n        expect(container.location).toHaveProperty('country');\n        expect(container.location).toHaveProperty('address');\n        expect(typeof container.location.city).toBe('string');\n        expect(typeof container.location.country).toBe('string');\n        expect(typeof container.location.address).toBe('string');\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n\n    it('should validate SystemIntegrations structure', async () => {\n      try {\n        const containers = await containerService.getContainers(0, 1);\n        if (containers.data.length === 0) {\n          console.warn('No containers available for validation test');\n          return;\n        }\n\n        const container = containers.data[0];\n        expect(container.system_integrations).toHaveProperty('fa_integration');\n        expect(container.system_integrations).toHaveProperty('aws_environment');\n        expect(container.system_integrations).toHaveProperty('mbai_environment');\n        \n        const validateIntegration = (integration: any) => {\n          expect(integration).toHaveProperty('name');\n          expect(integration).toHaveProperty('enabled');\n          expect(typeof integration.name).toBe('string');\n          expect(typeof integration.enabled).toBe('boolean');\n        };\n\n        validateIntegration(container.system_integrations.fa_integration);\n        validateIntegration(container.system_integrations.aws_environment);\n        validateIntegration(container.system_integrations.mbai_environment);\n      } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          console.warn('Backend not available, skipping test');\n          return;\n        }\n        throw error;\n      }\n    }, TEST_CONFIG.INTEGRATION_TEST_TIMEOUT);\n  });\n});","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/services/containerService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/services/containerService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/services/dataModels.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/services/mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Avatar/Avatar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getSizeConfig' is assigned a value but never used.","line":94,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":369,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":369,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9426,9429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9426,9429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9550,9553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9550,9553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":373,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9618,9621],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9618,9621],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Avatar as MuiAvatar, AvatarProps as MuiAvatarProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport PersonIcon from '@mui/icons-material/Person';\nimport clsx from 'clsx';\nimport { useTheme, Theme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nexport type AvatarSize = 'medium';\nexport type AvatarVariant = 'circular' | 'rounded' | 'square';\nexport type AvatarStatus = 'online' | 'busy' | 'away' | 'offline' | 'none';\n\nexport interface AvatarProps extends Omit<MuiAvatarProps, 'variant'> {\n  /**\n   * The src attribute for the img element.\n   */\n  src?: string;\n\n  /**\n   * The alt attribute for the img element.\n   */\n  alt?: string;\n\n  /**\n   * Used in combination with `src` or `srcSet` to provide an alt attribute for the rendered img element.\n   */\n  name?: string;\n\n  /**\n   * The size of the avatar.\n   * @default 'medium'\n   */\n  size?: AvatarSize;\n\n  /**\n   * The shape of the avatar.\n   * @default 'circular'\n   */\n  variant?: AvatarVariant;\n\n  /**\n   * Custom CSS class for the avatar.\n   */\n  className?: string;\n  \n  /**\n   * If true, the avatar will display a loading indicator.\n   * @default false\n   */\n  loading?: boolean;\n\n  /**\n   * Custom fallback icon when src fails to load and no name is provided.\n   */\n  fallbackIcon?: React.ReactNode;\n\n  /**\n   * Status indicator for the avatar.\n   * @default 'none'\n   */\n  status?: AvatarStatus;\n\n\n  /**\n   * Set of sources for different screen sizes when using responsive images.\n   */\n  srcSet?: string;\n\n  /**\n   * Shadow effect level for the avatar.\n   * @default 0\n   */\n  elevation?: 0 | 1 | 2 | 3;\n  \n  /**\n   * If true, the avatar will have a border.\n   * @default false\n   */\n  bordered?: boolean;\n  \n  /**\n   * Border color for the avatar when bordered is true.\n   */\n  borderColor?: string;\n}\n\ninterface SizeConfig {\n  width: number | string;\n  height: number | string;\n  fontSize: string;\n}\n\n// Fixed size configuration\nconst getSizeConfig = (theme: Theme): SizeConfig => {\n  const baseUnit = theme.spacing(1); // Usually 8px in most Material UI themes\n  \n  return {\n    width: `calc(${baseUnit} * 5)`, // 40px typically\n    height: `calc(${baseUnit} * 5)`,\n    fontSize: '1.25rem',\n  };\n};\n\n// Status indicator styling\nconst getStatusStyles = (status: AvatarStatus, theme: Theme) => {\n  if (status === 'none') return {};\n\n  // Fixed status indicator size\n  const statusSize = theme.spacing(1.5); // 12px\n\n  // Color based on status\n  const statusColorMap = {\n    online: theme.palette.success.main || '#4caf50',\n    busy: theme.palette.error.main || '#f44336',\n    away: theme.palette.warning.main || '#ff9800',\n    offline: theme.palette.grey[400] || '#bdbdbd',\n    none: 'transparent',\n  };\n\n  return {\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      bottom: '5%',\n      right: '5%',\n      width: statusSize,\n      height: statusSize,\n      borderRadius: '50%',\n      backgroundColor: statusColorMap[status],\n      border: `2px solid ${theme.palette.background.paper}`,\n      boxSizing: 'border-box',\n    },\n  };\n};\n\n// Get elevation (shadow) styles\nconst getElevationStyles = (elevation: 0 | 1 | 2 | 3, theme: Theme) => {\n  if (elevation === 0) return {};\n\n  const shadowMap = {\n    1: theme.shadows[1],\n    2: theme.shadows[4],\n    3: theme.shadows[8],\n  };\n\n  return {\n    boxShadow: shadowMap[elevation],\n  };\n};\n\n// Styled avatar component with fixed TypeScript issues\ninterface StyledAvatarProps {\n  avatarSize?: AvatarSize; \n  isLoading?: boolean; \n  avatarStatus?: AvatarStatus;\n  elevation?: 0 | 1 | 2 | 3;\n  bordered?: boolean;\n  borderColor?: string;\n}\n\nconst StyledAvatar = styled(MuiAvatar, {\n  shouldForwardProp: (prop) => !['avatarSize', 'isLoading', 'avatarStatus', 'elevation', 'bordered', 'borderColor', 'responsive'].includes(String(prop)),\n})<StyledAvatarProps>((props) => {\n  const { \n    theme, \n    avatarSize = 'medium', \n    isLoading, \n    avatarStatus = 'none', \n    elevation = 0, \n    bordered = false, \n    borderColor, \n    responsive = true \n  } = props;\n  \n  const sizeMap = getResponsiveSizeMap(theme);\n\n  // Base styles\n  return {\n    backgroundColor: '#EAEAEA',\n    color: '#666666',\n    position: 'relative' as const,\n    ...(avatarSize && sizeMap[avatarSize]),\n    \n    // Add box-sizing to ensure consistent sizing with borders\n    boxSizing: 'border-box' as const,\n    \n    // Add loading state\n    ...(isLoading && {\n      '&::before': {\n        content: '\"\"',\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'rgba(255, 255, 255, 0.7)',\n        zIndex: 1,\n        borderRadius: 'inherit',\n      },\n    }),\n    \n    // Style SVG icons\n    '& .MuiSvgIcon-root': {\n      color: '#666666',\n      width: '60%',\n      height: '60%',\n    },\n    \n    // Add status indicator\n    ...getStatusStyles(avatarStatus, avatarSize, theme),\n    \n    // Add shadow if elevation is set\n    ...getElevationStyles(elevation, theme),\n    \n    // Add border if specified\n    ...(bordered && {\n      border: `2px solid ${borderColor || theme.palette.background.paper}`,\n    }),\n    \n    // Add responsive styles for different breakpoints\n    ...(responsive && {\n      [`${theme.breakpoints.down('sm')}`]: {\n        ...(avatarSize === 'large' ? sizeMap['medium'] : {}),\n        ...(avatarSize === 'xlarge' ? sizeMap['large'] : {}),\n      },\n      [`${theme.breakpoints.down(600)}`]: { // Using pixel value instead of 'xs' as down('xs') is deprecated\n        ...(avatarSize === 'medium' ? sizeMap['small'] : {}),\n        ...(avatarSize === 'large' ? sizeMap['small'] : {}),\n        ...(avatarSize === 'xlarge' ? sizeMap['medium'] : {}),\n      },\n    }),\n  };\n});\n\n/**\n * Avatar component to display user profile image or initials\n *\n * A versatile avatar component that supports images, initials, custom icons,\n * responsive sizing, status indicators, and various styling options.\n * \n * @component\n * @example\n * ```tsx\n * // Basic usage\n * <Avatar src=\"/path/to/image.jpg\" alt=\"User Name\" />\n * \n * // With user name fallback (shows initials if image fails to load)\n * <Avatar src=\"/path/to/image.jpg\" name=\"John Doe\" size=\"large\" />\n * \n * // With status indicator\n * <Avatar name=\"John Doe\" status=\"online\" />\n * \n * // With elevation and border\n * <Avatar \n *   src=\"/path/to/image.jpg\" \n *   elevation={2} \n *   bordered \n *   borderColor=\"#2196f3\" \n * />\n * \n * // With responsive sizing\n * <Avatar \n *   src=\"/path/to/image.jpg\" \n *   size=\"xlarge\" \n *   responsive\n *   srcSet=\"/path/to/small.jpg 300w, /path/to/medium.jpg 600w\"\n * />\n * ```\n */\nexport const Avatar: React.FC<AvatarProps> = ({\n  src,\n  srcSet,\n  alt,\n  name,\n  size = 'medium',\n  variant = 'circular',\n  className,\n  loading = false,\n  fallbackIcon = <PersonIcon />,\n  status = 'none',\n  responsive = true,\n  elevation = 0,\n  bordered = false,\n  borderColor,\n  ...props\n}) => {\n  // State to track image loading error\n  const [hasError, setHasError] = useState(false);\n  const theme = useTheme();\n  \n  // Reset error state if src changes\n  useEffect(() => {\n    setHasError(false);\n  }, [src]);\n  \n  // Get appropriate size based on screen size if responsive\n  const isSmallScreen = useMediaQuery(theme.breakpoints.down('sm'));\n  const isXsScreen = useMediaQuery('(max-width:600px)'); // Use explicit pixel value instead of 'xs'\n\n  // Adjust size based on screen size if responsive is true\n  const getResponsiveSize = (): AvatarSize => {\n    if (!responsive) return size;\n    \n    if (isXsScreen) {\n      if (size === 'xlarge') return 'medium';\n      if (size === 'large' || size === 'medium') return 'small';\n      return 'xsmall';\n    } else if (isSmallScreen) {\n      if (size === 'xlarge') return 'large';\n      if (size === 'large') return 'medium';\n      return size;\n    }\n    \n    return size;\n  };\n\n  // Helper function to get initials from name\n  const getInitials = (name: string) => {\n    if (!name) return '';\n    return name\n      .split(' ')\n      .map(part => part[0])\n      .join('')\n      .toUpperCase()\n      .substring(0, 2);\n  };\n\n  // Generate a background color based on name for consistent color per user\n  const getBackgroundColor = (name: string) => {\n    if (!name) return '#EAEAEA';\n    \n    // Simple hash function\n    const hash = name.split('').reduce((acc, char) => {\n      return char.charCodeAt(0) + ((acc << 5) - acc);\n    }, 0);\n    \n    // Generate HSL color with fixed saturation and lightness for good contrast\n    const h = Math.abs(hash % 360);\n    return `hsl(${h}, 70%, 80%)`; // Pastel color for good contrast with text\n  };\n\n  // Determine what to render inside the avatar\n  const renderChildren = () => {\n    if (loading) {\n      return null; // The loading state is handled via CSS\n    }\n\n    if (!hasError && src) {\n      return undefined; // Let Material UI handle the image\n    }\n\n    if (name) {\n      return getInitials(name);\n    }\n\n    return fallbackIcon;\n  };\n  \n  // Choose the appropriate background color if using initials\n  const bgStyle = name && !src ? { bgcolor: getBackgroundColor(name) } : {};\n  const responsiveSize = getResponsiveSize();\n\n  // Make TypeScript happy with proper typing\n  const avatarProps = {\n    src: hasError ? undefined : src,\n    srcSet,\n    alt: alt || name || 'Avatar',\n    avatarSize: responsiveSize,\n    variant: variant as any, // Type casting to handle TS error\n    className: clsx(className),\n    isLoading: loading,\n    avatarStatus: status as any, // Type casting to handle TS error\n    elevation: elevation as any, // Type casting to handle TS error\n    bordered,\n    borderColor,\n    responsive,\n    onError: () => setHasError(true),\n    ...bgStyle,\n    ...props\n  };\n\n  return (\n    <StyledAvatar {...avatarProps}>\n      {renderChildren()}\n    </StyledAvatar>\n  );\n};\n\nexport default Avatar;","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Avatar/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/BreadcrumbNav/BreadcrumbNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/BreadcrumbNav/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Button/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Button/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Chip/Chip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Chip/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ContainerHeader/ContainerHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ContainerHeader/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ContainerUserHeader/ContainerUserHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ContainerUserHeader/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Header/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Header/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/InfoCard/InfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/InfoCard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/MetricCard/MetricCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/MetricCard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/MetricCardsContainer/MetricCardsContainer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Theme' is defined but never used.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMediaQuery' is defined but never used.","line":2,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Theme, useMediaQuery } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { MetricCard } from '../MetricCard/MetricCard';\n\nexport interface MetricData {\n  /**\n   * The title of the metric card.\n   */\n  title: string;\n  \n  /**\n   * The current metric value to display.\n   */\n  value: string | number;\n  \n  /**\n   * Optional target or comparison value to display alongside the main value.\n   */\n  targetValue?: string | number;\n  \n  /**\n   * The icon to display next to the value.\n   */\n  icon?: React.ReactNode;\n}\n\nexport interface MetricCardsContainerProps {\n  /**\n   * Array of metric data objects to display as cards.\n   */\n  metrics: MetricData[];\n  \n  /**\n   * Optional CSS class name for the container.\n   */\n  className?: string;\n  \n  /**\n   * Optional flag to use fluid grid layout instead of fixed columns.\n   * When true, uses CSS Grid with auto-fill; when false, uses Material UI Grid.\n   */\n  useFluidGrid?: boolean;\n}\n\nconst StyledContainer = styled(Box)(() => ({\n  padding: 0, // Remove container padding to match reference\n  backgroundColor: 'transparent', // Transparent container background\n  width: '100%',\n  borderRadius: 0, // No border radius on container\n}));\n\nconst StyledFluidGrid = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  gap: theme.spacing(1), // 8px gap to match reference tighter spacing\n  width: '100%',\n  \n  [theme.breakpoints.down('md')]: {\n    gap: theme.spacing(1), // 8px on medium screens\n  },\n  \n  [theme.breakpoints.down('sm')]: {\n    flexDirection: 'column',\n    gap: theme.spacing(1), // 8px on small screens - stack vertically on mobile\n  },\n  \n  // For extra small screens (custom breakpoint)\n  '@media (max-width: 600px)': {\n    gap: theme.spacing(1), // 8px on extra small screens\n  },\n}));\n\n/**\n * MetricCardsContainer component displays a responsive grid of metric cards.\n * \n * Features:\n * - Responsive grid layout that adapts to different screen sizes\n * - Configurable to use either fixed columns or fluid grid layout\n * - Consistent spacing and padding across all breakpoints\n * - Matches the Figma design with proper background color and spacing\n * \n * @component\n * @example\n * ```tsx\n * const metrics = [\n *   { title: 'Air Temperature', value: '20°C', targetValue: '21°C', icon: <DeviceThermostatIcon /> },\n *   { title: 'Rel. Humidity', value: '65%', targetValue: '68%', icon: <WaterDropIcon /> },\n *   // Additional metrics...\n * ];\n * \n * <MetricCardsContainer metrics={metrics} />\n * ```\n * \n * @example\n * ```tsx\n * // With fluid grid layout\n * <MetricCardsContainer metrics={metrics} useFluidGrid={true} />\n * ```\n */\nexport const MetricCardsContainer: React.FC<MetricCardsContainerProps> = ({\n  metrics,\n  className,\n  useFluidGrid = false,\n}) => {\n  const getGridSpacing = (): number => {\n    return 1; // 8px consistent across all screen sizes to match reference\n  };\n\n  // Render with fluid grid if specified, otherwise use Material UI Grid\n  if (useFluidGrid) {\n    return (\n      <StyledContainer className={className}>\n        <StyledFluidGrid>\n          {metrics.map((metric, index) => (\n            <MetricCard\n              key={`metric-${index}`}\n              title={metric.title}\n              value={metric.value}\n              targetValue={metric.targetValue}\n              icon={metric.icon}\n            />\n          ))}\n        </StyledFluidGrid>\n      </StyledContainer>\n    );\n  }\n  \n  // Default rendering with flexbox horizontal layout\n  return (\n    <StyledContainer className={className}>\n      <Box sx={{ \n        display: 'flex', \n        flexDirection: 'row', \n        flexWrap: 'wrap',\n        gap: getGridSpacing(),\n        width: '100%',\n        [theme => theme.breakpoints.down('sm')]: {\n          flexDirection: 'column'\n        }\n      }}>\n        {metrics.map((metric, index) => (\n          <Box key={`metric-${index}`} sx={{ \n            flex: '1 1 auto',\n            minWidth: '140px',\n            [theme => theme.breakpoints.down('sm')]: {\n              flex: '1 1 100%',\n              minWidth: 'unset'\n            }\n          }}>\n            <MetricCard\n              sx={{backgroundColor: index > 2 ? '#ffffff': undefined}}\n              title={metric.title}\n              value={metric.value}\n              targetValue={metric.targetValue}\n              icon={metric.icon}\n            />\n          </Box>\n        ))}\n      </Box>\n    </StyledContainer>\n  );\n};\n\nexport default MetricCardsContainer;","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/MetricCardsContainer/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/NextButton/NextButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/NextButton/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Pagination/Pagination.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fullWidth' is defined but never used.","line":45,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Box, Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { NextButton } from '../NextButton/NextButton';\nimport { PreviousButton } from '../PreviousButton/PreviousButton';\n\nexport interface PaginationProps {\n  /**\n   * Current page number (1-based)\n   * @default 1\n   */\n  page: number;\n  \n  /**\n   * Total number of pages\n   * @default 1\n   */\n  totalPages: number;\n  \n  /**\n   * Optional text to display before page information\n   * @default \"Showing page\"\n   */\n  showingText?: string;\n  \n  /**\n   * If `true`, the pagination will take up the full width of its container\n   * @default false\n   */\n  fullWidth?: boolean;\n  \n  /**\n   * Callback fired when the page is changed\n   */\n  onPageChange: (page: number) => void;\n  \n  /**\n   * Custom class name\n   */\n  className?: string;\n}\n\nconst PaginationContainer = styled(Box, {\n  shouldForwardProp: (prop) => prop !== 'fullWidth',\n})<{ fullWidth?: boolean }>(({ theme, fullWidth }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n  width: '100%',\n  [theme.breakpoints.down('sm')]: {\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  },\n}));\n\nconst PageInfoText = styled(Typography)(({ theme }) => ({\n  fontFamily: 'Inter, sans-serif',\n  fontSize: '14px',\n  lineHeight: '20px',\n  color: '#71717A',\n  fontWeight: 400,\n  margin: '0 16px',\n  [theme.breakpoints.down('sm')]: {\n    margin: '8px 0',\n    order: 3, // Move to bottom on mobile\n  },\n}));\n\nconst ButtonsContainer = styled(Box)(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  gap: '8px',\n  [theme.breakpoints.down('sm')]: {\n    width: '100%',\n    justifyContent: 'space-between',\n  },\n}));\n\n/**\n * Pagination component for navigating through pages.\n * Uses NextButton and PreviousButton components for navigation controls.\n *\n * @component\n * @example\n * ```tsx\n * <Pagination \n *   page={1} \n *   totalPages={10} \n *   onPageChange={(newPage) => console.log(`Navigate to page ${newPage}`)} \n * />\n * ```\n */\nexport const Pagination: React.FC<PaginationProps> = ({\n  page = 1,\n  totalPages = 1,\n  showingText = \"Showing page\",\n  fullWidth = false,\n  onPageChange,\n  className,\n}) => {\n  const handlePreviousClick = () => {\n    if (page > 1) {\n      onPageChange(page - 1);\n    }\n  };\n\n  const handleNextClick = () => {\n    if (page < totalPages) {\n      onPageChange(page + 1);\n    }\n  };\n\n  return (\n    <PaginationContainer fullWidth={fullWidth} className={className}>\n        <PageInfoText>{showingText}</PageInfoText>\n      <ButtonsContainer>\n\n        \n        <PreviousButton \n          onClick={handlePreviousClick} \n          disabled={page <= 1} \n        />\n        <PageInfoText>{` ${page} of ${totalPages}`}</PageInfoText>\n        <NextButton \n          onClick={handleNextClick} \n          disabled={page >= totalPages} \n        />\n      </ButtonsContainer>\n    </PaginationContainer>\n  );\n};\n\nexport default Pagination;","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Pagination/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/PreviousButton/PreviousButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/PreviousButton/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ResponsiveContainer/ResponsiveContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ResponsiveContainer/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ResponsiveGrid/ResponsiveGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ResponsiveGrid/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/SystemInfoCard/SystemInfoCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/SystemInfoCard/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Tab/Tab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isFirst' is defined but never used.","line":60,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLast' is defined but never used.","line":60,"column":71,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":77}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Tab as MuiTab, TabProps as MuiTabProps, Badge } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useIsMobile } from '../../../utils/responsive';\n\nexport interface TabProps extends Omit<MuiTabProps, 'variant'> {\n  /**\n   * The label content of the tab.\n   */\n  label: React.ReactNode;\n  \n  /**\n   * If `true`, the tab will be disabled.\n   */\n  disabled?: boolean;\n  \n  /**\n   * If provided, a badge will be shown with this content.\n   */\n  badgeContent?: React.ReactNode;\n  \n  /**\n   * If `true`, the badge will be shown.\n   */\n  showBadge?: boolean;\n  \n  /**\n   * Custom style override for indicator color\n   */\n  customIndicatorColor?: string;\n  \n  /**\n   * If `true`, this tab is the first tab in the group\n   */\n  isFirst?: boolean;\n  \n  /**\n   * If `true`, this tab is the last tab in the group\n   */\n  isLast?: boolean;\n  \n  /**\n   * If `true`, tabs will have equal width in their container\n   */\n  equalWidth?: boolean;\n}\n\n// Define the props that we'll pass to the styled component\ninterface StyledTabProps {\n  customIndicatorColor?: string;\n  isMobile?: boolean;\n  isFirst?: boolean;\n  isLast?: boolean;\n  equalWidth?: boolean;\n}\n\nconst StyledTab = styled(MuiTab, {\n  shouldForwardProp: (prop) => \n    !['customIndicatorColor', 'showBadge', 'badgeContent', 'isMobile', 'isFirst', 'isLast', 'equalWidth'].includes(prop as string),\n})<StyledTabProps>(({ theme, customIndicatorColor, isMobile, isFirst, isLast, equalWidth }) => ({\n  textTransform: 'none',\n  minWidth: 0,\n  fontWeight: 500,\n  fontSize: '14px',\n  lineHeight: '20px',\n  letterSpacing: '0.1px',\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  color: '#49454F',\n  padding: '8px 16px',\n  // Add smaller padding on mobile\n  ...(isMobile && {\n    padding: '8px 12px',\n  }),\n  // Make tab flex grow if equal width is desired\n  ...(equalWidth && {\n    flex: 1,\n  }),\n  '&.Mui-selected': {\n    color: customIndicatorColor || '#3545EE',\n    fontWeight: 500,\n  },\n  '&.Mui-disabled': {\n    color: theme.palette.text.disabled,\n  },\n  '&:hover': {\n    // Subtle hover effect\n    backgroundColor: 'rgba(0, 0, 0, 0.04)',\n  },\n}));\n\n/**\n * Tab component used in navigation and content organization.\n * The component follows Material Design guidelines and adapts to different screen sizes.\n * \n * @component\n * @example\n * ```tsx\n * <Tabs value={value} onChange={handleChange}>\n *   <Tab label=\"Week\" />\n *   <Tab label=\"Month\" />\n *   <Tab label=\"Quarter\" />\n *   <Tab label=\"Year\" />\n * </Tabs>\n * ```\n */\nexport const Tab: React.FC<TabProps> = ({\n  label,\n  disabled = false,\n  badgeContent,\n  showBadge = false,\n  customIndicatorColor,\n  isFirst = false,\n  isLast = false,\n  equalWidth = false,\n  ...props\n}) => {\n  const isMobile = useIsMobile();\n\n  // Render the label with a badge if showBadge is true and badgeContent is provided\n  const renderLabel = () => {\n    if (showBadge && badgeContent) {\n      return (\n        <Badge \n          badgeContent={badgeContent} \n          color=\"error\" \n          sx={{ \n            '& .MuiBadge-badge': {\n              right: -8,\n              top: -6,\n              minWidth: '16px',\n              height: '16px',\n              fontSize: '10px',\n              backgroundColor: '#B3261E',\n              padding: '0 4px',\n              // Slightly adjust badge on mobile\n              ...(isMobile && {\n                right: -6,\n                minWidth: '14px',\n                height: '14px',\n                fontSize: '9px',\n              }),\n            }\n          }}\n        >\n          {label}\n        </Badge>\n      );\n    }\n    return label;\n  };\n\n  return (\n    <StyledTab\n      label={renderLabel()}\n      disabled={disabled}\n      customIndicatorColor={customIndicatorColor}\n      disableRipple\n      isMobile={isMobile}\n      isFirst={isFirst}\n      isLast={isLast}\n      equalWidth={equalWidth}\n      {...props}\n    />\n  );\n};\n\nexport default Tab;","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Tab/TabGroup.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Tab/Tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Tab/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Table/Table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Table/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/TimePeriodSelector/TimePeriodSelector.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/TimePeriodSelector/TimePeriodSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isFirst' is defined but never used.","line":42,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":70},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLast' is defined but never used.","line":42,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":78}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { Box } from '@mui/material';\n\nexport type TimePeriod = 'week' | 'month' | 'quarter' | 'year';\n\nexport interface TimePeriodOption {\n  /** Label shown on the tab */\n  label: string;\n  /** Value for the tab */\n  value: TimePeriod;\n  /** If true, tab will be disabled */\n  disabled?: boolean;\n}\n\nexport interface TimePeriodSelectorProps {\n  /** The currently selected time period value */\n  value: TimePeriod;\n  /** Callback fired when the value changes */\n  onChange: (value: TimePeriod) => void;\n  /** Custom className for styling */\n  className?: string;\n  /** If true, will disable the entire component */\n  disabled?: boolean;\n  /** Optional override of the tabs */\n  options?: TimePeriodOption[];\n}\n\ninterface TabProps {\n  selected?: boolean;\n  disabled?: boolean;\n  isFirst?: boolean;\n  isLast?: boolean;\n}\n\nconst TabsContainer = styled(Box)(() => ({\n  display: 'flex',\n  borderRadius: '4px',\n  overflow: 'hidden',\n}));\n\nconst Tab = styled('button')<TabProps>(({ selected, disabled, isFirst, isLast }) => ({\n  flex: 1,\n  padding: '8px 16px',\n  border: selected ? '1px solid #3545EE' : '1px solid transparent',\n  outline: 'none',\n  cursor: 'pointer',\n  background: 'transparent',\n  color: selected ? '#3545EE' : '#49454F',\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  fontSize: '12px',\n  fontWeight: 500,\n  lineHeight: '16px',\n  letterSpacing: '0.5px',\n  whiteSpace: 'nowrap',\n  position: 'relative',\n  transition: 'all 0.2s ease',\n  borderRadius: '4px',\n  \n  // Disabled state\n  ...(disabled && {\n    color: '#BDBDBD',\n    cursor: 'default',\n    opacity: 0.7,\n  }),\n  \n  // Hover state (only apply when not disabled)\n  ...(!disabled && {\n    '&:hover': {\n      backgroundColor: 'rgba(0, 0, 0, 0.04)',\n    },\n  }),\n  \n  // Active state (when pressed)\n  ...(!disabled && {\n    '&:active': {\n      backgroundColor: 'rgba(0, 0, 0, 0.08)',\n    },\n  }),\n\n  // Focus state for accessibility\n  '&:focus-visible': {\n    outline: '2px solid #3545EE',\n    outlineOffset: '-2px',\n  },\n\n  // Media query for mobile\n  '@media (max-width: 600px)': {\n    padding: '8px 12px',\n  },\n}));\n\n/**\n * TimePeriodSelector component displays a series of tab options for selecting time periods.\n * This component follows Material Design specifications and adapts to different screen sizes.\n * \n * @component\n * @example\n * ```tsx\n * const [period, setPeriod] = React.useState<TimePeriod>('week');\n * \n * const handleChange = (value: TimePeriod) => {\n *   setPeriod(value);\n * };\n * \n * return (\n *   <TimePeriodSelector \n *     value={period}\n *     onChange={handleChange}\n *   />\n * );\n * ```\n */\nexport const TimePeriodSelector: React.FC<TimePeriodSelectorProps> = ({\n  value,\n  onChange,\n  className,\n  disabled = false,\n  options = [\n    { label: 'Week', value: 'week' },\n    { label: 'Month', value: 'month' },\n    { label: 'Quarter', value: 'quarter' },\n    { label: 'Year', value: 'year' },\n  ],\n}) => {\n  const handleClick = (option: TimePeriodOption) => {\n    if (!disabled && !option.disabled) {\n      onChange(option.value);\n    }\n  };\n\n  return (\n    <TabsContainer className={className} role=\"tablist\" aria-orientation=\"horizontal\">\n      {options.map((option, index) => (\n        <Tab\n          key={option.value}\n          role=\"tab\"\n          aria-selected={value === option.value}\n          aria-disabled={disabled || option.disabled}\n          selected={value === option.value}\n          disabled={disabled || option.disabled}\n          onClick={() => handleClick(option)}\n          isFirst={index === 0}\n          isLast={index === options.length - 1}\n          tabIndex={disabled || option.disabled ? -1 : 0}\n        >\n          {option.label}\n        </Tab>\n      ))}\n    </TabsContainer>\n  );\n};\n\nexport default TimePeriodSelector;","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/TimePeriodSelector/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Tooltip/Tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/Tooltip/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/TotalContainerIndicator/TotalContainerIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/TotalContainerIndicator/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ViewToggleTabs/ViewToggleTabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/ViewToggleTabs/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/types/containers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/types/metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/utils/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/shared/utils/responsive.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/avatar/Avatar.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/breadcrumbNav/BreadcrumbNav.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/button/Button.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/chip/ActiveChip.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/chip/Chip.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/chip/InactiveChip.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/containerHeader/ContainerHeader.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/containerUserHeader/ContainerUserHeader.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/header/Header.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/infoCard/InfoCard.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/metricCard/MetricCard.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/metricCardsContainer/MetricCardsContainer.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/nextButton/NextButton.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/pagination/Pagination.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/previousButton/PreviousButton.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/responsiveContainer/ResponsiveContainer.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/responsiveGrid/ResponsiveGrid.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/systemInfoCard/SystemInfoCard.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/table/Table.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/tabs/Tab.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/timePeriodSelector/TimePeriodSelector.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/tooltip/Tooltip.stories.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Story' is defined but never used.","line":66,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Story' is defined but never used.","line":134,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Story' is defined but never used.","line":174,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":11}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Meta, StoryObj } from '@storybook/react';\nimport { Button, Box, Typography, Grid } from '@mui/material';\n\nimport { Tooltip } from '../../shared/components/ui/Tooltip';\n\nconst meta = {\n  title: 'UI/Tooltip',\n  component: Tooltip,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  decorators: [\n    (Story) => (\n      <div style={{ padding: '3rem' }}>\n        {Story()}\n      </div>\n    ),\n  ],\n} satisfies Meta<typeof Tooltip>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n/**\n * Basic example of the Tooltip component with default settings.\n * This matches the design in component_429-20129.json.\n */\nexport const Default: Story = {\n  args: {\n    title: '2 days',\n    arrow: true,\n    placement: 'bottom',\n    children: <Button variant=\"contained\">Hover me</Button>,\n  },\n};\n\n/**\n * Tooltip with a longer description to demonstrate text wrapping behavior.\n */\nexport const WithLongText: Story = {\n  args: {\n    title: 'This is a longer tooltip that demonstrates how the text wraps when it exceeds the maximum width.',\n    arrow: true,\n    placement: 'bottom',\n    children: <Button variant=\"contained\">Hover for long text</Button>,\n  },\n};\n\n/**\n * Examples of tooltips with different placement options.\n */\nexport const Placements: Story = {\n  args: {\n    title: 'Tooltip with various placements',\n    children: <Button variant=\"outlined\">Hover me</Button>,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tooltips can be placed in different positions: top, right, bottom, left.'\n      }\n    }\n  },\n  decorators: [\n    (Story) => (\n      <Grid container spacing={4} alignItems=\"center\" justifyContent=\"center\" style={{ height: '300px' }}>\n        <Grid item xs={4} container justifyContent=\"center\">\n          <Tooltip title=\"Top placement\" placement=\"top\" arrow>\n            <Button variant=\"outlined\">Top</Button>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={4} container justifyContent=\"center\">\n          <Tooltip title=\"Right placement\" placement=\"right\" arrow>\n            <Button variant=\"outlined\">Right</Button>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={4} container justifyContent=\"center\">\n          <Tooltip title=\"Bottom placement\" placement=\"bottom\" arrow>\n            <Button variant=\"outlined\">Bottom</Button>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={4} container justifyContent=\"center\">\n          <Tooltip title=\"Left placement\" placement=\"left\" arrow>\n            <Button variant=\"outlined\">Left</Button>\n          </Tooltip>\n        </Grid>\n      </Grid>\n    ),\n  ],\n};\n\n/**\n * Example of a tooltip without an arrow.\n */\nexport const NoArrow: Story = {\n  args: {\n    title: 'Tooltip without arrow',\n    arrow: false,\n    placement: 'bottom',\n    children: <Button variant=\"contained\">No arrow</Button>,\n  },\n};\n\n/**\n * Example of a controlled tooltip that is always visible.\n */\nexport const AlwaysOpen: Story = {\n  args: {\n    title: 'This tooltip is always visible',\n    arrow: true,\n    placement: 'bottom',\n    open: true,\n    children: <Button variant=\"contained\">Always visible</Button>,\n  },\n};\n\n/**\n * Example of tooltips on different elements.\n */\nexport const DifferentTriggers: Story = {\n  args: {\n    title: 'Tooltip on different elements',\n    children: <Button variant=\"contained\">Button with tooltip</Button>,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tooltips can be applied to various elements like buttons, text, and icons.'\n      }\n    }\n  },\n  decorators: [\n    (Story) => (\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n        <Tooltip title=\"Tooltip on a button\">\n          <Button variant=\"contained\">Button with tooltip</Button>\n        </Tooltip>\n\n        <Tooltip title=\"Tooltip on text\">\n          <Typography component=\"span\" style={{ cursor: 'help' }}>\n            Hover over this text to see tooltip\n          </Typography>\n        </Tooltip>\n\n        <Tooltip title=\"Tooltip on an icon\">\n          <span role=\"button\" style={{ display: 'inline-block', cursor: 'pointer' }}>\n            ℹ️\n          </span>\n        </Tooltip>\n      </Box>\n    ),\n  ],\n};\n\n/**\n * Example showing tooltip with different delays.\n */\nexport const WithCustomDelays: Story = {\n  args: {\n    title: \"Tooltip with custom delays\",\n    enterDelay: 500,\n    leaveDelay: 500,\n    children: <Button variant=\"outlined\">Custom delays</Button>,\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Tooltips can have custom enter and leave delay timings.'\n      }\n    }\n  },\n  decorators: [\n    (Story) => (\n      <Box sx={{ display: 'flex', gap: 2 }}>\n        <Tooltip title=\"Quick to appear (100ms)\" enterDelay={100} leaveDelay={500}>\n          <Button variant=\"outlined\">Fast enter, slow leave</Button>\n        </Tooltip>\n\n        <Tooltip title=\"Slow to appear (1000ms)\" enterDelay={1000} leaveDelay={100}>\n          <Button variant=\"outlined\">Slow enter, fast leave</Button>\n        </Tooltip>\n      </Box>\n    ),\n  ],\n};\n\n/**\n * Example showing interactive tooltip that can be hovered.\n */\nexport const Interactive: Story = {\n  args: {\n    title: 'You can hover over me without me disappearing!',\n    arrow: true,\n    placement: 'bottom',\n    disableInteractive: false,\n    children: <Button variant=\"contained\">Interactive tooltip</Button>,\n  },\n};","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/totalContainerIndicator/TotalContainerIndicator.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/stories/viewToggleTabs/ViewToggleTabs.stories.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/styles/global.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/styles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/styles/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/test/mocks/handlers.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'params' is defined but never used.","line":28,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":76},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3418,3421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3418,3421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3834,3837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3834,3837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { http, HttpResponse } from 'msw';\nimport { mockContainerDetail, mockContainerMetrics, mockContainerCrops, mockContainerActivities } from '../../services/mockData';\nimport config from '../../services/config';\n\nconst baseUrl = config.api.baseUrl;\n\nexport const handlers = [\n  // Get container by ID\n  http.get(`${baseUrl}/containers/:containerId`, ({ params }) => {\n    const { containerId } = params;\n    \n    if (containerId === 'farm-container-04') {\n      return HttpResponse.json(mockContainerDetail);\n    }\n    \n    if (containerId === 'not-found') {\n      return new HttpResponse(null, { status: 404 });\n    }\n    \n    return HttpResponse.json({\n      ...mockContainerDetail,\n      id: containerId as string,\n      name: containerId as string,\n    });\n  }),\n\n  // Get container metrics\n  http.get(`${baseUrl}/containers/:containerId/metrics`, ({ request, params }) => {\n    const url = new URL(request.url);\n    const timeRange = url.searchParams.get('time_range') || 'WEEK';\n    \n    // Simulate different data based on time range\n    const metrics = {\n      ...mockContainerMetrics,\n      // Modify values based on time range for testing\n      temperature: {\n        ...mockContainerMetrics.temperature,\n        current: timeRange === 'MONTH' ? 22 : mockContainerMetrics.temperature.current,\n      },\n    };\n    \n    return HttpResponse.json(metrics);\n  }),\n\n  // Get container crops\n  http.get(`${baseUrl}/containers/:containerId/crops`, ({ request }) => {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page') || '0');\n    const pageSize = parseInt(url.searchParams.get('page_size') || '10');\n    const seedType = url.searchParams.get('seed_type');\n    \n    let results = mockContainerCrops.results;\n    \n    // Filter by seed type if provided\n    if (seedType) {\n      results = results.filter(crop => \n        crop.seed_type.toLowerCase().includes(seedType.toLowerCase())\n      );\n    }\n    \n    // Paginate results\n    const startIndex = page * pageSize;\n    const endIndex = startIndex + pageSize;\n    const paginatedResults = results.slice(startIndex, endIndex);\n    \n    return HttpResponse.json({\n      total: results.length,\n      results: paginatedResults,\n    });\n  }),\n\n  // Get container activities\n  http.get(`${baseUrl}/containers/:containerId/activities`, ({ request }) => {\n    const url = new URL(request.url);\n    const limit = parseInt(url.searchParams.get('limit') || '5');\n    \n    const limitedActivities = mockContainerActivities.activities.slice(0, limit);\n    \n    return HttpResponse.json({\n      activities: limitedActivities,\n    });\n  }),\n\n  // Get all containers\n  http.get(`${baseUrl}/containers`, ({ request }) => {\n    const url = new URL(request.url);\n    const skip = parseInt(url.searchParams.get('skip') || '0');\n    const limit = parseInt(url.searchParams.get('limit') || '100');\n    \n    // Return a list of containers\n    const containers = Array.from({ length: 3 }, (_, index) => ({\n      ...mockContainerDetail,\n      id: `container-${index + 1}`,\n      name: `container-${index + 1}`,\n    }));\n    \n    const paginatedContainers = containers.slice(skip, skip + limit);\n    \n    return HttpResponse.json({\n      data: paginatedContainers,\n      count: containers.length,\n    });\n  }),\n\n  // Create container\n  http.post(`${baseUrl}/containers`, async ({ request }) => {\n    const containerData = await request.json() as any;\n    \n    const newContainer = {\n      ...containerData,\n      id: `new-container-${Date.now()}`,\n      created: new Date().toISOString(),\n      modified: new Date().toISOString(),\n    };\n    \n    return HttpResponse.json(newContainer, { status: 201 });\n  }),\n\n  // Update container\n  http.put(`${baseUrl}/containers/:containerId`, async ({ request, params }) => {\n    const updateData = await request.json() as any;\n    const { containerId } = params;\n    \n    if (containerId === 'not-found') {\n      return new HttpResponse(null, { status: 404 });\n    }\n    \n    const updatedContainer = {\n      ...mockContainerDetail,\n      ...updateData,\n      id: containerId as string,\n      modified: new Date().toISOString(),\n    };\n    \n    return HttpResponse.json(updatedContainer);\n  }),\n\n  // Delete container\n  http.delete(`${baseUrl}/containers/:containerId`, ({ params }) => {\n    const { containerId } = params;\n    \n    if (containerId === 'not-found') {\n      return new HttpResponse(null, { status: 404 });\n    }\n    \n    if (containerId === 'forbidden') {\n      return new HttpResponse('Permission denied', { status: 403 });\n    }\n    \n    return new HttpResponse(null, { status: 204 });\n  }),\n\n  // Error simulation endpoints\n  http.get(`${baseUrl}/containers/timeout-test`, () => {\n    // Simulate a timeout by not responding\n    return new Promise(() => {});\n  }),\n\n  http.get(`${baseUrl}/containers/server-error`, () => {\n    return new HttpResponse('Internal Server Error', { status: 500 });\n  }),\n\n  http.get(`${baseUrl}/containers/network-error`, () => {\n    return HttpResponse.error();\n  }),\n];","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/test/mocks/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/test/testEnv.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1795,1798],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1795,1798],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2498,2501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2498,2501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3568,3571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3568,3571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4072,4075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4072,4075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4575,4578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4575,4578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Test environment configuration and utilities\nimport { expect } from 'vitest';\nexport const TEST_CONFIG = {\n  // Backend configuration\n  BACKEND_URL: 'http://localhost:8000',\n  API_BASE_URL: 'http://localhost:8000/api/v1',\n  \n  // Test timeouts\n  UNIT_TEST_TIMEOUT: 5000,      // 5 seconds for unit tests\n  INTEGRATION_TEST_TIMEOUT: 30000, // 30 seconds for integration tests\n  \n  // Test data\n  DEFAULT_CONTAINER_ID: 'container-04', // Backend uses 'container-04' as ID, 'farm-container-04' as name\n  \n  // Feature flags for tests\n  RUN_INTEGRATION_TESTS: process.env.NODE_ENV !== 'ci', // Skip in CI unless backend is available\n  SKIP_BACKEND_TESTS: process.env.SKIP_BACKEND_TESTS === 'true',\n  \n  // Test environment detection\n  IS_CI: process.env.CI === 'true',\n  IS_LOCAL: !process.env.CI,\n};\n\n// Helper function to check if backend is available\nexport async function isBackendAvailable(): Promise<boolean> {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    \n    const response = await fetch(`${TEST_CONFIG.BACKEND_URL}/docs`, {\n      signal: controller.signal,\n    });\n    \n    clearTimeout(timeoutId);\n    return response.ok;\n  } catch {\n    return false;\n  }\n}\n\n// Helper function to skip test if backend is not available\nexport function skipIfBackendUnavailable(backendAvailable: boolean) {\n  if (!backendAvailable) {\n    console.warn('⚠️  Backend server not available at http://localhost:8000');\n    console.warn('📝 To run integration tests, start the backend server:');\n    console.warn('   cd backend');\n    console.warn('   python -m uvicorn app.main:app --reload');\n    console.warn('');\n  }\n  return backendAvailable;\n}\n\n// Test data generators\nexport const generateTestContainer = (overrides: Partial<any> = {}) => ({\n  name: `test-container-${Date.now()}`,\n  type: 'PHYSICAL',\n  tenant: 'test-tenant',\n  purpose: 'Development',\n  location: {\n    city: 'Test City',\n    country: 'Test Country',\n    address: 'Test Address'\n  },\n  status: 'ACTIVE',\n  creator: 'Test User',\n  seed_types: ['test-seed'],\n  notes: 'Test container for integration tests',\n  shadow_service_enabled: false,\n  ecosystem_connected: false,\n  system_integrations: {\n    fa_integration: { name: 'Test', enabled: false },\n    aws_environment: { name: 'Test', enabled: false },\n    mbai_environment: { name: 'Test', enabled: false }\n  },\n  ...overrides,\n});\n\n// Validation helpers\nexport const validateContainerStructure = (container: any) => {\n  const requiredFields = [\n    'id', 'name', 'type', 'tenant', 'purpose', 'location', 'status',\n    'created', 'modified', 'creator', 'seed_types', 'notes',\n    'shadow_service_enabled', 'ecosystem_connected', 'system_integrations'\n  ];\n  \n  requiredFields.forEach(field => {\n    expect(container).toHaveProperty(field);\n  });\n  \n  // Validate enums\n  expect(['PHYSICAL', 'VIRTUAL']).toContain(container.type);\n  expect(['CREATED', 'ACTIVE', 'MAINTENANCE', 'INACTIVE']).toContain(container.status);\n  expect(['Development', 'Research', 'Production']).toContain(container.purpose);\n  \n  // Validate nested objects\n  expect(container.location).toHaveProperty('city');\n  expect(container.location).toHaveProperty('country');\n  expect(container.location).toHaveProperty('address');\n  \n  expect(container.system_integrations).toHaveProperty('fa_integration');\n  expect(container.system_integrations).toHaveProperty('aws_environment');\n  expect(container.system_integrations).toHaveProperty('mbai_environment');\n};\n\nexport const validateMetricsStructure = (metrics: any) => {\n  const requiredMetrics = [\n    'temperature', 'humidity', 'co2', 'yield',\n    'nursery_utilization', 'cultivation_utilization'\n  ];\n  \n  requiredMetrics.forEach(metric => {\n    expect(metrics).toHaveProperty(metric);\n    expect(metrics[metric]).toHaveProperty('current');\n    expect(metrics[metric]).toHaveProperty('unit');\n    expect(typeof metrics[metric].current).toBe('number');\n    expect(typeof metrics[metric].unit).toBe('string');\n  });\n};\n\nexport const validateCropStructure = (crop: any) => {\n  const requiredFields = [\n    'id', 'seed_type', 'cultivation_area', 'nursery_table',\n    'last_sd', 'last_td', 'last_hd', 'avg_age', 'overdue'\n  ];\n  \n  requiredFields.forEach(field => {\n    expect(crop).toHaveProperty(field);\n  });\n  \n  expect(typeof crop.cultivation_area).toBe('number');\n  expect(typeof crop.nursery_table).toBe('number');\n  expect(typeof crop.avg_age).toBe('number');\n  expect(typeof crop.overdue).toBe('number');\n};\n\nexport const validateActivityStructure = (activity: any) => {\n  const requiredFields = [\n    'id', 'type', 'timestamp', 'description', 'user', 'details'\n  ];\n  \n  requiredFields.forEach(field => {\n    expect(activity).toHaveProperty(field);\n  });\n  \n  expect(['SEEDED', 'SYNCED', 'ENVIRONMENT_CHANGED', 'CREATED', 'MAINTENANCE'])\n    .toContain(activity.type);\n  \n  expect(activity.user).toHaveProperty('name');\n  expect(activity.user).toHaveProperty('role');\n};","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/test/utils.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":17,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":17,"endColumn":22},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"This rule can't verify that `export *` only exports components.","line":34,"column":1,"nodeType":"ExportAllDeclaration","messageId":"exportAll","endLine":34,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { MemoryRouter } from 'react-router-dom';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\n\n// Create a basic theme for tests\nconst testTheme = createTheme({\n  palette: {\n    primary: {\n      main: '#3545EE',\n    },\n  },\n});\n\n// Custom render function that includes providers\nconst AllTheProviders = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <MemoryRouter>\n      <ThemeProvider theme={testTheme}>\n        <CssBaseline />\n        {children}\n      </ThemeProvider>\n    </MemoryRouter>\n  );\n};\n\nconst customRender = (\n  ui: React.ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>,\n) => render(ui, { wrapper: AllTheProviders, ...options });\n\n// Re-export everything\nexport * from '@testing-library/react';\n\n// Override render method\nexport { customRender as render };","usedDeprecatedRules":[]},{"filePath":"/Users/ihusar/Documents/Projects/pnl-artifacts-1page/demo/frontend/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
