#!/usr/bin/env python3
"""Database seeding script template - to be generated by agent based on data models."""

import asyncio
import random
from datetime import datetime, timedelta
from typing import List, Dict, Any

from sqlalchemy.ext.asyncio import AsyncSession
from app.core.db import AsyncSessionLocal
from app.core.config import settings

# AGENT_IMPORTS_PLACEHOLDER
# This section will be populated by the agent with actual model imports
# Example:
# from app.models.user import User
# from app.models.container import Container

class DatabaseSeeder:
    """Database seeding utility class."""
    
    def __init__(self):
        self.db_session = None
        
    async def __aenter__(self):
        self.db_session = AsyncSessionLocal()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.db_session:
            if exc_type:
                await self.db_session.rollback()
            await self.db_session.close()

    # AGENT_SEEDING_METHODS_PLACEHOLDER
    # This section will be populated by the agent with model-specific seeding methods
    # Example methods:
    # async def create_test_users(self, count: int = 10) -> List[User]:
    # async def create_test_containers(self, count: int = 100) -> List[Container]:

    async def create_default_test_user(self) -> Dict[str, Any]:
        """Create default test user for authentication."""
        # This method will be implemented by the agent based on User model
        default_user_data = {
            "username": settings.DEFAULT_USERNAME,
            "password": settings.DEFAULT_PASSWORD,
            "email": f"{settings.DEFAULT_USERNAME}@example.com",
            "is_active": True,
            "is_superuser": False,
        }
        
        # AGENT_USER_CREATION_PLACEHOLDER
        # Agent will replace this with actual user creation logic
        print(f"‚úÖ Created default test user: {settings.DEFAULT_USERNAME}")
        return default_user_data

    async def clear_all_data(self):
        """Clear all test data from database."""
        print("üßπ Clearing existing test data...")
        
        # AGENT_CLEAR_DATA_PLACEHOLDER
        # Agent will populate this with delete statements for all models
        # Example:
        # from sqlalchemy import delete
        # await self.db_session.execute(delete(Container))
        # await self.db_session.execute(delete(User))
        
        await self.db_session.commit()
        print("‚úÖ Database cleared")

    async def create_performance_test_data(self, count: int = 1000):
        """Create large dataset for performance testing."""
        print(f"üöÄ Creating {count} records for performance testing...")
        
        # Create data in batches for better performance
        batch_size = 100
        total_created = 0
        
        for i in range(0, count, batch_size):
            batch_count = min(batch_size, count - i)
            
            # AGENT_PERFORMANCE_DATA_PLACEHOLDER
            # Agent will implement batch creation for each model
            
            total_created += batch_count
            print(f"üìä Progress: {total_created}/{count} records created")
        
        print(f"‚úÖ Performance test data creation completed: {total_created} records")

    async def seed_database(self, clear_existing: bool = False, performance_mode: bool = False):
        """Main seeding function."""
        print("üå± Starting database seeding...")
        
        try:
            if clear_existing:
                await self.clear_all_data()
            
            # Create default test user first
            await self.create_default_test_user()
            
            # AGENT_SEEDING_CALLS_PLACEHOLDER
            # Agent will add calls to model-specific seeding methods
            # Example:
            # await self.create_test_users(count=10)
            # if performance_mode:
            #     await self.create_performance_test_data(count=10000)
            # else:
            #     await self.create_test_containers(count=100)
            
            await self.db_session.commit()
            print("üéâ Database seeding completed successfully!")
            
        except Exception as e:
            await self.db_session.rollback()
            print(f"‚ùå Database seeding failed: {e}")
            raise


async def main():
    """Main entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Seed database with test data")
    parser.add_argument("--clear", action="store_true", help="Clear existing data")
    parser.add_argument("--performance", action="store_true", help="Create large dataset for performance testing")
    parser.add_argument("--count", type=int, default=100, help="Number of records to create per model")
    
    args = parser.parse_args()
    
    async with DatabaseSeeder() as seeder:
        await seeder.seed_database(
            clear_existing=args.clear,
            performance_mode=args.performance
        )


if __name__ == "__main__":
    asyncio.run(main())
